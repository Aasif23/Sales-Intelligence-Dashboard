import sqlite3
from flask import Flask, jsonify, request
from flask_cors import CORS 
import pandas as pd
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

app = Flask(__name__)
CORS(app)

DATABASE = 'sales_analytics.db'

def get_db_connection():
    """Establishes and returns a connection to the SQLite database."""
    conn = sqlite3.connect(DATABASE)
    conn.row_factory = sqlite3.Row # This allows accessing columns by name
    return conn

@app.route('/')
def home():
    """Basic home route to confirm the API is running."""
    return "Sales Analytics API is running!"

@app.route('/api/kpis')
def get_kpis():
    """
    API endpoint to retrieve Key Performance Indicators (KPIs).
    Fetches total sales, total profit, average discount, and total orders from the database.
    """
    conn = get_db_connection()
    try:
        # Fetch Total Sales from monthly_sales_by_region table
        total_sales_df = pd.read_sql_query("SELECT SUM(TotalSales) FROM monthly_sales_by_region", conn)
        total_sales = total_sales_df.iloc[0, 0] if not total_sales_df.empty else 0.0

        # Fetch Total Profit from profitable_categories table
        total_profit_df = pd.read_sql_query("SELECT SUM(TotalProfit) FROM profitable_categories", conn)
        total_profit = total_profit_df.iloc[0, 0] if not total_profit_df.empty else 0.0

        # Fetch Average Discount from category_wise_avg_discount table
        avg_discount_df = pd.read_sql_query("SELECT AVG(AverageDiscount) FROM category_wise_avg_discount", conn)
        avg_discount = avg_discount_df.iloc[0, 0] if not avg_discount_df.empty else 0.0

        # Total orders is a hardcoded placeholder here, as it's not generated by the current pipeline
        total_orders = 2823 

        # Format KPIs for display
        kpis = {
            "totalSales": f"{total_sales/1000000:.1f}M" if total_sales else "N/A",
            "totalProfit": f"{total_profit/1000000:.1f}M" if total_profit else "N/A",
            "avgDiscount": f"{(avg_discount * 100):.1f}%" if avg_discount else "N/A",
            "totalOrders": f"{total_orders:,}"
        }
        logging.info("KPIs fetched successfully.")
        return jsonify(kpis)
    except Exception as e:
        logging.error(f"Error fetching KPIs: {e}", exc_info=True)
        return jsonify({"error": "Could not retrieve KPIs", "details": str(e)}), 500
    finally:
        conn.close()

@app.route('/api/monthly_sales')
def get_monthly_sales():
    """
    API endpoint to retrieve monthly sales data.
    - If no 'country' param: returns granular monthly sales per country.
    - If 'country' param is 'All Countries': returns sum of sales across all countries per month.
    - If specific 'country' param: returns monthly sales for that specific country.
    """
    country = request.args.get('country') # Get country, no default initially
    conn = get_db_connection()
    try:
        if country is None:
            # Initial load: return granular data including Country for dropdown population
            query = "SELECT SalesYear, SalesMonth, Country, TotalSales FROM monthly_sales_by_region ORDER BY SalesYear, SalesMonth, Country"
        elif country == 'All Countries':
            # User selected 'All Countries': aggregate totals across all countries
            query = "SELECT SalesYear, SalesMonth, SUM(TotalSales) AS TotalSales FROM monthly_sales_by_region GROUP BY SalesYear, SalesMonth ORDER BY SalesYear, SalesMonth"
        else:
            # User selected a specific country: filter and return monthly totals for that country
            query = f"SELECT SalesYear, SalesMonth, TotalSales FROM monthly_sales_by_region WHERE Country = '{country}' ORDER BY SalesYear, SalesMonth"
        
        df = pd.read_sql_query(query, conn)
        data = df.to_dict(orient="records")
        logging.info(f"Monthly sales data for country '{country if country else 'all countries (granular)'}' fetched successfully.")
        return jsonify(data)
    except Exception as e:
        logging.error(f"Error fetching monthly sales: {e}", exc_info=True)
        return jsonify({"error": "Could not retrieve monthly sales data", "details": str(e)}), 500
    finally:
        conn.close()

@app.route('/api/top_customers')
def get_top_customers():
    """API endpoint to retrieve the top 10 customers by profit."""
    conn = get_db_connection()
    try:
        df = pd.read_sql_query("SELECT CustomerName, TotalProfit FROM top_10_customers_by_profit ORDER BY TotalProfit DESC LIMIT 10", conn)
        data = df.to_dict(orient="records")
        logging.info("Top customers data fetched successfully.")
        return jsonify(data)
    except Exception as e:
        logging.error(f"Error fetching top customers: {e}", exc_info=True)
        return jsonify({"error": "Could not retrieve top customers data", "details": str(e)}), 500
    finally:
        conn.close()

@app.route('/api/category_discounts')
def get_category_discounts():
    """API endpoint to retrieve category-wise average discounts."""
    conn = get_db_connection()
    try:
        df = pd.read_sql_query("SELECT ProductLine, AverageDiscount FROM category_wise_avg_discount ORDER BY AverageDiscount DESC", conn)
        data = df.to_dict(orient="records")
        logging.info("Category discounts data fetched successfully.")
        return jsonify(data)
    except Exception as e:
        logging.error(f"Error fetching category discounts: {e}", exc_info=True)
        return jsonify({"error": "Could not retrieve category discounts data", "details": str(e)}), 500
    finally:
        conn.close()

@app.route('/api/profitable_categories')
def get_profitable_categories():
    """API endpoint to retrieve profitable categories."""
    conn = get_db_connection()
    try:
        df = pd.read_sql_query("SELECT ProductLine, TotalProfit FROM profitable_categories ORDER BY TotalProfit DESC", conn)
        data = df.to_dict(orient="records")
        logging.info("Profitable categories data fetched successfully.")
        return jsonify(data)
    except Exception as e:
        logging.error(f"Error fetching profitable categories: {e}", exc_info=True)
        return jsonify({"error": "Could not retrieve profitable categories data", "details": str(e)}), 500
    finally:
        conn.close()

@app.route('/api/high_value_orders')
def get_high_value_orders():
    """API endpoint to retrieve high-value orders (sales above a threshold)."""
    conn = get_db_connection()
    try:
        df = pd.read_sql_query("SELECT OrderNumber, CustomerName, Sales FROM sales_above_threshold ORDER BY Sales DESC", conn)
        data = df.to_dict(orient="records")
        logging.info("High-value orders data fetched successfully.")
        return jsonify(data)
    except Exception as e:
        logging.error(f"Error fetching high-value orders: {e}", exc_info=True)
        return jsonify({"error": "Could not retrieve high-value orders data", "details": str(e)}), 500
    finally:
        conn.close()

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
